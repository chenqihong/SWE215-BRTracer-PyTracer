<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1" type="text/css">
<title>PDE What's New for 3.1</title>
</head>

<body>

<h2>What's New in 3.1</h2>
<p>This document contains descriptions of some of the more interesting or significant 
  changes made to PDE for the 3.1 release of Eclipse since 3.0. </p>

<h2><a name="PDE">PDE</a></h2>
<table summary="PDE New in 3.1" cellpadding="10" cellspacing="0" width="600">
  <tr> 
    <td colspan="2" align="left" valign="top"><hr></td>
  </tr>
  <tr> 
    <td height="855" align="left" valign="top"> <p align="right"><b>Bundle manifests 
        for plug-ins</b></p></td>
    <td valign="top">In Eclipse 3.1, it is strongly recommended that plug-ins 
      contain an OSGi bundle manifest.mf. In addition to faster startup and classloading, 
      this format will allow you to take advantage of many of the new runtime 
      capabilities such as fine control over what packages you want to expose 
      to clients. 
      <p>The option to create a manifest.mf in the New Plug-in Project creation 
        wizard is now on by default.</p>
      <p><img src="images/pluginwizard.png" alt="New Plug-in Wizard" border="0"></p>
      <p>You can create a bundle manifest.mf for an existing plug-in on the Overview 
        page of the plug-in manifest editor.</p>
      <p><img src="images/overview.png" alt="Plug-in Content" border="0"></p>
	</td></tr>
  <tr> 
    <td colspan="2" align="left" valign="top"><hr></td>
  </tr>
  <tr> 
    <td valign="top" align="left"> <p align="right"><b>PDE enforces code accessibility</b></p></td>
    <td valign="top">The plug-in's manifest.mf file allows you to control on a 
      per-package basis the visibility of your plug-in's code to downstream plug-ins. 
      <p>PDE manages each plug-in's Java classpath and checks these visibility 
        rules at compile time. This means no one will never be caught by surprise 
        by classloading errors at runtime, and will always be aware when they 
        are referencing internal (discouraged) types.</p>
      <p><img src="images/restricted.png" alt="discouraged access" width="466" height="115" border="0"></p>
      <p>For full details, refer to the <a href="../guide/restrictions.htm">Access 
        Restrictions</a> document.</p></td>
  </tr>
  <colgroup>
  <col width="20%" valign="top" align="right">
  <col width="80%" valign="top" align="left">
  </colgroup>
  <tbody>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top"> <div align="right"><strong>Creating a rich client application</strong></div></td>
      <td valign="top"> <div align="left"> 
          <p>The New Plug-in Project wizard gives you the option to create a rich 
            client application.</p>
          <p><img src="images/rich_client.PNG" alt="Rich Client"></p>
        </div></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top"><div align="right"><strong>RCP templates</strong></div></td>
      <td valign="top"><p>The New Plug-in Project wizard provides ready-to-run 
          RCP templates. The templates range from a minimal Hello RCP template 
          to a rich, fully-branded RCP mail template.</p>
        <p><img src="images/templates.PNG" alt="RCP templates"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Build an Eclipse product 
          with a single click</b></p></td>
      <td valign="top">You can now create and manage an Eclipse product in a *.product 
        file, which can be created via <b>File &gt; New &gt; Other... &gt; Product 
        Configuration</b>. 
        <p>The product configuration editor manages all aspects of a product from 
          basic definition to branding. You can create plug-in-based and feature-based 
          products. The overview page provides hot links to test and export the 
          product.</p>
        <p><img src="images/product-editor.png" alt="product editor" border="0"></p></td>
    </tr>
    <tr> 
      <td colspan="2" align="left" valign="top"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Eclipse product export 
          wizard</b></p></td>
      <td valign="top"><p>You can export an Eclipse product as an archive or a 
          directory structure in the Eclipse Product Export wizard.</p>
        <p>The wizard is invoked via <b>File &gt; Export &gt; Eclipse Product 
          </b>or from the <b>Overview</b> page of the Product Configuration editor. 
        </p>
        <p><img src="images/export.png" alt="Export Wizard" border="0"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Cross-platform product 
          export</b></p></td>
      <td valign="top">If you have the RCP delta pack installed, you can now build 
        and export your product for multiple platforms at the same time via the 
        Eclipse Product export wizard (<b>File &gt; Export &gt; Eclipse Product</b>). 
        <p> <img src="images/cross.png" alt="Cross Platform" border="0"></p></td></tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Create a plug-in from 
          existing JAR</b></p></td>
      <td valign="top">PDE now provides a wizard that creates a plug-in from existing 
        JAR archives. This wizard is ideal if you would like to package third-party 
        non-Eclipse JARs as an Eclipse plug-in. 
        <p>The wizard can be invoked via <b>File &gt; New &gt; Project &gt; Plug-in 
          from existing JAR archives.</b></p>
        <p><img src="images/bundlizer.png" alt="Bundlizer" border="0"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Manifest editor supports 
          more OSGi bundle manifest headers</b></p></td>
      <td valign="top">The PDE plug-in editor now exposes many interesting features 
        of the runtime that are available only if your plug-in has a manifest.mf 
        file. The Runtime page of the editor, for example, is the place where 
        you can control access to your plug-in's code on a fine-grained level. 
        <p><img src="images/runtime.png" alt="Bundle Editor" border="0"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Manifest.mf validation</b></p></td>
      <td valign="top">PDE now flags syntactic and semantic errors in the plug-in's 
        manifest.mf file. 
        <p><img src="images/validation.png" alt="manifest.mf validation" border="0"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Improved plugin.xml validation</b></p></td>
      <td valign="top"><p>Attributes and elements defined in extension point schemas 
          can now be marked as translatable. Also, obsolete attributes and elements 
          can be marked as deprecated, in the same spirit as @deprecated tag in 
          obsolete Java APIs.</p>
        <p>PDE uses this metadata to flag the usage of deprecated and non-externalized 
          attributes and elements in the plug-in's manifest files.</p>
        <p><img src="images/compilers.PNG" alt="Manifest Compiler"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Sharing plug-in manifest 
          compiler settings</b></p></td>
      <td valign="top">You can now set the PDE plug-in manifest compiler settings 
        on a per-project basis and share these settings among team members. 
        <p><img src="images/project_pref.PNG" alt="Project preferences"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"> <p align="right"><b>Improved plug-in dependencies 
          view</b></p></td>
      <td valign="top"><p>The PDE Plug-in Dependencies view now shows both tabular 
          and tree visualizations of dependencies, as well as caller/callee relationships 
          and cyclic dependencies. This view can be opened from the context menu 
          of plug-in project via <b>PDE Tools &gt; Open Dependencies</b>.</p>
        <p><img src="images/plugins.PNG" alt="Plug-in Dependencies"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td valign="top" align="left"><div align="right"><strong>Validate plug-in 
          set before launching</strong></div></td>
      <td valign="top"><p>Prior to launching your Eclipse application, you can 
          now validate the selected subset of plug-ins to find lurking launch 
          startup problems such as unsatisfied plug-in dependencies, missing applications, 
          etc.</p>
        <p><img src="images/validate.PNG" alt="Validate Plug-ins"> </p></td>
    </tr>
    <tr> 
      <td colspan="2" align="left" valign="top"><hr></td>
    </tr>
    <tr> 
      <td width="19%" valign="top" align="left"> <p align="right"><b>No need to 
          -clean</b></p></td>
      <td width="81%" valign="top">When self-hosting with PDE, you no longer need 
        to launch a runtime Eclipse application with the <code>-clean</code> program 
        argument. Leaving this argument off significantly improves startup time.</td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td width="19%" valign="top" align="left"> <p align="right"><b>Improved 
          feature and update site support</b></p></td>
      <td width="81%" valign="top">The PDE feature and update site manifest editors 
        have been redesigned to provide a simpler and better workflow.&nbsp; Improvements 
        include the ability to build and package features without having to import 
        them into your workspace.</td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <tr> 
      <td width="19%" valign="top" align="left"> <p align="right"><b>JNLP manifests 
          and JAR signing</b></p></td>
      <td width="81%" valign="top">The feature export wizard now provides you 
        with the option to create JNLP manifests and digitally sign your plug-in 
        and feature archives for Java Web Start deployment. 
        <p><img src="images/signed.png" alt="JNLP and signed" border="0"></p></td>
    </tr>
    <tr> 
      <td colspan="2"><hr></td>
    </tr>
    <!-- ****************** END OF N&N TABLE ****************** -->
  </tbody>
</table>

</body>

</html>
