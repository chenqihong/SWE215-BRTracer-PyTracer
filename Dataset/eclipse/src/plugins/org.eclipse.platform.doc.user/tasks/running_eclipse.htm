<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Running Eclipse</title>
</head>

<BODY BGCOLOR="#ffffff">

<h1>Running Eclipse</h1>
<p>After you install (unzip) the Eclipse driver in a directory (such as c:\eclipse),
start the Workbench by running the Eclipse executable file found in the
top level install directory. The executable file is called <samp>eclipse.exe</samp> on Windows
systems and <samp>eclipse</samp> on Linux systems. 

<b>Note:</b> the following discussion describes setting up on Windows systems. Setup on Linux is
analogous.</p>

<p>If you do not specify otherwise, Eclipse will prompt you for a 
workspace directory.  The default location for this directory will be a 
child of your user home directory called "workspace" 
(for example, c:\Documents and Settings\My Name\workspace). This workspace 
directory is used as the default content area for your projects
as well as for holding any required metadata. For shared or
multi-workspace installs you should explicitly state the location of your
workspace rather than using the default.  In addition to simply entering a 
different location at the prompt you may also use the -data command line argument.</p>

<h2>Setting a specific location for the workspace with -data</h2>

<p>To use the <code>-data</code> command line argument, simply add <code>-data <var>your_workspace_location</var></code>
 (for example, <code>-data c:\users\robert\myworkspace</code>)
to the <b>Target</b> field in the shortcut properties, or include it explicitly on your
command line.</p>

<h2>Setting the Java VM using -vm</h2>

<p>It is recommended that you explicitly specify which Java VM to
use when running Eclipse.  This is achieved with the <code>-vm</code> command line
argument (for example, <code>-vm c:\jre\bin\javaw.exe</code>).  If you don't use 
<code>-vm</code>, Eclipse will use the first Java VM found on the O/S path.  When you install other products, 
they may change your path, resulting in a different Java VM being used when you next launch Eclipse.
</p>

<h1>Advanced Topics in Running Eclipse </h1>

<p>The Eclipse executable and the platform itself offer a number of execution 
  options of interest to people developing or debugging parts of Eclipse. This 
  is a list of the commonly used options, for a full list see the Eclipse runtime 
  options page in the Platform Plug-in Developer Guide. The general form of running 
  the Eclipse executable is:</p>

<blockquote>

<pre>eclipse [platform options] [-vmargs [Java VM arguments]]</pre>

</blockquote>

<TABLE width="90%" border=1 height="2005">
  <caption>
  <b> Eclipse Startup Parameters </b> 
  </caption>
  <TBODY>
    <tr> 
      <th width="33%"> <b>Command</b></th>
      <th width="65%"><b>Description</b></th>
      <TD width="2%"><b>Since</b></TD>
    </tr>
    <tr> 
      <TD vAlign=top width="33%"> <pre><b>-arch</b> <var>architecture</var></pre></TD>
      <TD width="65%">Defines the processor architecture on which the Eclipse 
        platform is running. The Eclipse platform ordinarily computes the optimal 
        setting using the prevailing value of Java <code>os.arch</code> property. 
        If specified here, this is the value that the Eclipse platform uses. The 
        value specified here is available to plug-ins as BootLoader.getOSArch(). 
        Example values: &quot;x86&quot;, &quot;sparc&quot;, &quot;PA-RISC&quot;, 
        &quot;ppc&quot;.</TD>
      <TD width="2%">2.0</TD>
    </tr>
    <TR> 
      <TD vAlign=top width="33%"> <PRE><b>-application</b> <var>applicationId</var></PRE></TD>
      <TD width="65%">The application to run. Applications are declared by plug-ins 
        supplying extensions to the org.eclipse.core.runtime.applications extension 
        point. This argument is typically not needed. If specified, the value 
        overrides the value supplied by the configuration. If not specified, the 
        Eclipse Workbench is run.</TD>
      <TD width="2%">1.0</TD>
    </TR>
    <tr> 
      <TD vAlign=top width="33%"> <pre><b>-configuration</b> <var>configurationFileURL</var></pre></TD>
      <TD width="65%">The location for the Eclipse Platform configuration file, 
        expressed as a URL. The configuration file determines the location of 
        the Eclipse platform, the set of available plug-ins, and the primary feature. 
        Note that relative URLs are not allowed. The configuration file is written 
        to this location when the Eclipse platform is installed or updated. </TD>
      <TD width="2%">2.0</TD>
    </tr>
    <TR> 
      <TD vAlign=top width="33%"><PRE><b>-consolelog</b></PRE></TD>
      <TD width="65%">Mirrors the Eclipse platform's error log to the console 
        used to run Eclipse. Handy when combined with <code>-debug</code>.</TD>
      <TD width="2%">1.0</TD>
    </TR>
    <tr> 
      <TD vAlign=top width="33%"> <PRE><b>-data</b> <var>workspacePath</var></PRE></TD>
      <TD width="65%">The path of the workspace on which to run the Eclipse platform. 
        The workspace location is also the default location for projects. Relative 
        paths are interpreted relative to the directory that Eclipse was started 
        from.</TD>
      <TD width="2%">1.0</TD>
    </tr>
    <TR> 
      <TD vAlign=top width="33%"> <PRE><b>-debug</b> [<var>optionsFile</var>]</PRE></TD>
      <TD width="65%"> Puts the platform in debug mode and loads the debug options 
        from the file at the given location, if specified. This file indicates 
        which debug points are available for a plug-in and whether or not they 
        are enabled. If a file location is not given, the platform looks in the 
        directory that eclipse was started from for a file called ".options". 
        Both URLs and file system paths are allowed as file locations. </TD>
      <TD width="2%">1.0</TD>
    </TR>
    <tr> 
      <TD width="33%" height="133" vAlign=top> <PRE><b>-dev</b> [<var>classpathEntries</var>]</PRE></TD>
      <TD width="65%">Puts the platform in development mode. The optional classpath 
        entries (a comma separated list) are added to the runtime classpath of 
        each plug-in. For example, when the workspace contains plug-ins being 
        developed, specifying <code>-dev bin</code> adds a classpath entry for 
        each plug-in project's directory named <code>bin</code>, allowing freshly 
        generated class files to be found there. Redundant or non-existent classpath 
        entries are eliminated.</TD>
      <TD width="2%">1.0</TD>
    </tr>
    <TR> 
      <TD vAlign=top width="33%"> <pre><b>-keyring</b> <var>keyringFilePath</var></pre></TD>
      <TD width="65%"> The location of the authorization database (or &quot;key 
        ring&quot; file) on disk. This argument must be used in conjunction with 
        the <code>-password</code> option. Relative paths are interpreted relative 
        to the directory that Eclipse was started from.</TD>
      <TD width="2%">1.0</TD>
    </TR>
    <tr> 
      <TD vAlign=top width="33%"> <pre><b>-nl</b> <var>locale</var></pre></TD>
      <TD width="65%">Defines the name of the locale on which the Eclipse platform 
        is running. The Eclipse platform ordinarily computes the optimal setting 
        automatically. If specified here, this is the value that the Eclipse platform 
        uses. The value specified here is available to plug-ins as BootLoader.getNL(). 
        Example values: &quot;en_US&quot; and &quot;fr_FR_EURO&quot;.</TD>
      <TD width="2%">2.0</TD>
    </tr>
    <tr> 
      <TD vAlign=top width="33%"> <PRE><b>-nosplash</b></PRE></TD>
      <TD width="65%">Runs the platform without putting up the splash screen.</TD>
      <TD width="2%">1.0</TD>
    </tr>
    <tr> 
      <TD vAlign=top width="33%"> <PRE><b>-os</b> <var>operatingSystem</var></PRE></TD>
      <TD width="65%">Defines the operating system on which the Eclipse platform 
        is running. The Eclipse platform ordinarily computes the optimal setting 
        using the prevailing value of Java <code>os.name</code> property. If specified 
        here, this is the value that the Eclipse platform uses. The value specified 
        here is available to plug-ins as BootLoader.getOS(), and used to resolve 
        occurrences of the <code>$os$</code> variable in paths mentioned in the 
        plug-in manifest file. Example values: &quot;win32&quot;, &quot;linux&quot;, 
        &quot;hpux&quot;, &quot;solaris&quot;, &quot;aix&quot;.</TD>
      <TD width="2%">1.0</TD>
    </tr>
    <TR> 
      <TD vAlign=top width="33%"> <pre><b>-password</b> <var>password</var></pre></TD>
      <TD width="65%">The password for the authorization database. Used in conjunction 
        with the <code>-keyring</code> option.</TD>
      <TD width="2%">1.0</TD>
    </TR>
    <tr> 
      <TD vAlign=top width="33%"> <PRE><b>-perspective</b> <var>perspectiveId</var></PRE></TD>
      <TD width="65%">The perspective to open in the active workbench window on 
        startup. If this parameter is not specified, the perspective that was 
        active on shutdown will be opened.</TD>
      <TD width="2%">1.0</TD>
    </tr>
    <tr> 
      <TD vAlign=top width="33%"> <pre><b>-plugincustomization</b>
	  <var>propertiesFile</var></pre></TD>
      <TD width="65%">The location of a properties file containing default settings 
        for plug-in preferences. These default settings override default settings 
        specified in the primary feature. Relative paths are interpreted relative 
        to the directory that eclipse was started from.</TD>
      <TD width="2%">2.0</TD>
    </tr>
    <tr> 
      <TD vAlign=top> <pre><b>-product</b> <em>productId</em><br></pre></TD>
      <TD height="16">The ID of the product to run. The product gives the launched 
        instance of Eclipse its personality, and determines the product customization 
        information used. This replaces -feature, which is still supported for 
        compatibility.</TD>
      <TD height="16">3.0</TD>
    </tr>
    <TR> 
      <TD vAlign=top width="33%" height="16"><pre><b>-refresh</b> </pre></TD>
      <TD width="65%" height="16">Option for performing a global refresh of the 
        workspace on startup. This will reconcile any changes that were made in 
        the file system since the platform was last run. </TD>
      <TD width="2%" height="16">1.0</TD>
    </TR>
    <TR> 
      <TD vAlign=top width="33%" height="16"><pre><b>-showlocation</b> </pre></TD>
      <TD width="65%" height="16">Option for displaying the location of the workspace 
        in the window title bar. In release 2.0 this option only worked in conjunction 
        with the -data command line argument.</TD>
      <TD width="2%" height="16">2.0</TD>
    </TR>
    <tr> 
      <TD vAlign=top width="33%"> <PRE><b>-vm</b> <var>vmPath</var></PRE></TD>
      <TD width="65%">The location of Java Runtime Environment (JRE) to use to 
        run the Eclipse platform. If not specified, the JRE is at <code>jre</code>, 
        sibling of the Eclipse executable. Relative paths are interpreted relative 
        to the directory that eclipse was started from.</TD>
      <TD width="2%">1.0</TD>
    </tr>
    <tr> 
      <TD vAlign=top> <PRE><b>-vm</b><strong>args</strong> <em>args</em></PRE></TD>
      <TD>When passed to the Eclipse, this option is used to customize the operation 
        of the Java VM used to run Eclipse. If specified, this option must come 
        at the end of the command line. The given arguments are dependant on VM 
        that is being run.</TD>
      <TD>1.0</TD>
    </tr>
  </TBODY>
</TABLE>

<p>All arguments following (but not including) the -vmargs entry are passed
directly through to the indicated Java VM as virtual machine arguments (that is,
before the class to run).  <b>Note:</b> If an Eclipse startup argument, such as -data,
is provided after the Java vm arguments (-vmargs), Eclipse will not start and you will receive 
a &quot;JVM terminated. Exit code=1&quot; error.
</p>

<h2>Running on Different VMs&nbsp;</h2>
<h3>Running Eclipse on J9</h3>
<p>
When running Eclipse on J9 version 1.5, it is recommended that you use the following VM
options:
</p>
<blockquote>
  <pre>eclipse.exe [eclipse arguments] -vm <var>path_to_j9w.exe</var> 
            -vmargs -ms:32 -mm:2048 -mo:32768 -moi:32768 -mca:32 -mco:128 -mx:2000000</pre>
</blockquote>
<p> When running Eclipse on J9 version 2.0, the default arguments chosen by J9W 
  should be suitable. However, to override the parameters which are automatically 
  set internally by the Eclipse executable, you must specify -vmargs with no following arguments 
  as follows: </p>
<blockquote>
  <pre>eclipse.exe [eclipse arguments] -vm <var>path_to_j9w.exe</var> -vmargs</pre>
</blockquote>
<p>Please refer to the J9 VM documentation and help for further information.</p>

<h3>Running Eclipse on the IBM Developer Kit, Java(TM) Technology Edition VM</h3>

<p>The default VM settings for IBM Developer Kit, Java(TM) Technology Edition 1.3 Linux work well for initial exploration, but
are not sufficient for large scale development. For large scale development you
should modify your VM arguments
to make more heap available. For example, the following setting will allow the Java heap to grow to 256MB:&nbsp;
</p>
<blockquote>
<pre>-vmargs -Xmx256M </pre>
</blockquote>



</body>
</html>
