<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
The plug-in class
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
The plug-in class</H2>
<P >
So far, we've been looking at the different extensions that are provided by the readme tool. Let's look at the general 
definition of the readme tool plug-in.</P>

<H3>
Plug-in definition</H3>
<P >
The readme tool plug-in is defined at the top of the <b> plugin.xml</b> file.</P>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?eclipse version="3.0"?&gt;
&lt;plugin
   id=&quot;org.eclipse.ui.examples.readmetool&quot;
   name=&quot;%Plugin.name&quot;
   version=&quot;2.1.0&quot;
   provider-name=&quot;%Plugin.providerName&quot;
   class=&quot;org.eclipse.ui.examples.readmetool.ReadmePlugin&quot;&gt;

   &lt;runtime>
      &lt;library name=&quot;readmetool.jar&quot;/&gt;
   &lt;/runtime&gt;
   &lt;requires&gt;
      &lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.core.resources&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.core.runtime.compatibility&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.views&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.ide&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.jface.text&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.text&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.workbench.texteditor&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.editors&quot;/&gt;
   &lt;/requires&gt;
   ...</pre>
<P >
The plug-in definition includes the <b>name</b>, <b>id,</b> <b>version</b>, and <b>provider name</b> of the plug-in. We 
saw most of these parameters before in our hello world plug-in. The readme tool also defines a specialized plug-in class,
<b>ReadmePlugin</b>. </P>
<P >
The name of the jar file is also provided. File names specified in a <b> plugin.xml</b> file are relative to the
plug-in's directory, so the readme tool's jar file should be located directly in the plug-in's directory.</P>
<P >
The <b>requires</b> element informs the platform of the readme tool's dependencies. 
The workbench UI plug-ins are listed as required plug-ins, along with the various core, jface, and text plug-ins.  </P>

<H3>
AbstractUIPlugin</H3>
<P >
The<b> ReadmePlugin</b> class represents the readme
tool plug-in and manages the life cycle of the plug-in.&nbsp; As we saw in the
Hello World example, you don't have to specify a plug-in class.&nbsp; The
platform will provide one for you.&nbsp; In this case, our plug-in needs to
initialize UI related data when it starts up.&nbsp; The platform class <a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"><b>AbstractUIPlugin</b></a>
provides a structure for managing UI resources and is extended by <b>
ReadmePlugin</b>.</P>
<P >
<a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"><b>AbstractUIPlugin</b></a>
 uses the generic startup and shutdown methods to manage images, dialog settings, and a preference store during the lifetime of the plug-in.&nbsp;
We'll look at the specifics of the <b> ReadmePlugin</b> class when we work with dialogs and preferences.</P>



</BODY>
</HTML>
